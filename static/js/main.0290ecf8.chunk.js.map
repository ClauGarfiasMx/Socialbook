{"version":3,"sources":["serviceWorker.js","components/Navigation/index.js","constants/routes.js","components/Landing/index.js","components/SignUp/index.js","components/SignIn/index.js","components/PasswordForget/index.js","components/Home/index.js","components/Account/index.js","components/Admin/index.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Navigation","react_default","a","createElement","react_router_dom","to","Landing","SignUp","SignIn","PasswordForget","Home","Account","Admin","H1","styled","h1","_templateObject","App","components_Navigation","react_router","exact","path","component","LandingPage","AccountPage","HomePage","SignUpPage","SignInPage","AdminPage","PasswordForgetPage","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qFCOSC,EAtBI,kBACjBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCLS,WDKf,YAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCVS,KDUf,YAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCTS,YDSf,YAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCXO,UDWb,UAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GChBM,SDgBZ,YETOC,EARC,WACd,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBCKSI,EARA,WACb,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBCKSK,EARA,WACb,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBCKSM,EARQ,WACrB,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BCKSO,EARF,WACX,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBCKSQ,EARC,WACd,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBCKSS,EARD,WACZ,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iKCSN,IAAMU,QAAKC,EAAOC,GAAVC,KA0BOC,EApBH,WACV,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAD,YACAZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,MADF,IACiBjB,EAAAC,EAAAC,cAAA,WACfF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KR3BA,IQ2BsBC,UAAWC,IAC9CtB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KRxBM,WQwBgBC,UAAWE,IACxCvB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KR1BG,QQ0BgBC,UAAWG,IACrCxB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KR7BM,UQ6BgBC,UAAWI,IACxCzB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KR7BM,UQ6BgBC,UAAWK,IACxC1B,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KR3BI,SQ2BgBC,UAAWM,IACtC3B,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KR3Bc,aQ2BgBC,UAAWO,QC1B1DC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SX0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0290ecf8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as ROUTES from \"../../constants/routes\";\r\nconst Navigation = () => (\r\n  <div>\r\n    <ul>\r\n      <li>\r\n        <Link to={ROUTES.SIGN_IN}>Sign In</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.LANDING}>Landing</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.ACCOUNT}>Account</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.ADMIN}>Admin</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.HOME}>Home</Link>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Navigation;\r\n","export const LANDING = \"/\";\r\nexport const SIGN_UP = \"/signup\";\r\nexport const SIGN_IN = \"/signin\";\r\nexport const HOME = \"/home\";\r\nexport const ACCOUNT = \"/account\";\r\nexport const ADMIN = \"/admin\";\r\nexport const PASSWORD_FORGET = \"/pw-forget\";\r\n","import React from \"react\";\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <div>\r\n      <h1>Landing</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import React from \"react\";\r\n\r\nconst SignUp = () => {\r\n  return (\r\n    <div>\r\n      <h1>SignUp</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import React from \"react\";\r\n\r\nconst SignIn = () => {\r\n  return (\r\n    <div>\r\n      <h1>SignIn</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import React from \"react\";\r\n\r\nconst PasswordForget = () => {\r\n  return (\r\n    <div>\r\n      <h1>PasswordForget</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordForget;\r\n","import React from \"react\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <h1>Home</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Account = () => {\r\n  return (\r\n    <div>\r\n      <h1>Account</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n","import React from \"react\";\r\n\r\nconst Admin = () => {\r\n  return (\r\n    <div>\r\n      <h1>Admin</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport Navigation from \"../Navigation\";\r\nimport LandingPage from \"../Landing\";\r\nimport SignUpPage from \"../SignUp\";\r\nimport SignInPage from \"../SignIn\";\r\nimport PasswordForgetPage from \"../PasswordForget\";\r\nimport HomePage from \"../Home\";\r\nimport AccountPage from \"../Account\";\r\nimport AdminPage from \"../Admin\";\r\nimport * as ROUTES from \"../../constants/routes\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst H1 = styled.h1`\r\n  font-size: 1.5em;\r\n  text-align: center;\r\n  color: palevioletred;\r\n`;\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <H1>App</H1>\r\n      <Router>\r\n        <div>\r\n          <Navigation /> <hr />\r\n          <Route exact path={ROUTES.LANDING} component={LandingPage} />\r\n          <Route path={ROUTES.ACCOUNT} component={AccountPage} />\r\n          <Route path={ROUTES.HOME} component={HomePage} />\r\n          <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\r\n          <Route path={ROUTES.SIGN_IN} component={SignInPage} />\r\n          <Route path={ROUTES.ADMIN} component={AdminPage} />\r\n          <Route path={ROUTES.PASSWORD_FORGET} component={PasswordForgetPage} />\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./components/App\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}